name: ms-auth
# https://stackoverflow.com/questions/71855294/best-practices-for-storing-passwords-when-using-spring-boot
services:
  api-autenticacao:
    image: jp9910/microsservico-autenticacao:main
    build:
      dockerfile: ./Dockerfile
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-autenticacao:5432/autenticacao"
      SPRING_ACTIVE_PROFILE: dev
      URL_LOKI: http://loki-auth:3100
    ports:
      - "8081:8081"
    volumes:
      - ./src:/app/src
    depends_on:
      postgres-autenticacao:
        condition: service_healthy
  
  postgres-autenticacao:
    image: postgres:17
    volumes:
      - postgresauth-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    secrets:
      - senha-postgres
    user: postgres
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/senha-postgres
      POSTGRES_DB: "autenticacao"
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8082:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: jops40@hotmail.com
      PGADMIN_DEFAULT_PASSWORD: senha
    depends_on:
      - postgres-autenticacao
  
  prometheus-auth:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/prometheus_data:/prometheus
    command:
      # Arquivo de configuração do prometheus
      - '--config.file=/etc/prometheus/prometheus.yml'
      # Onde vai ser armazenado a TimeSeriesDatabase
      - '--storage.tsdb.path=/prometheus'
      # Bibliotecas que serão utilizadas pelo prometheus
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      # Bibliotecas que serão utilizadas pelo prometheus
      - '--web.console.templates=/etc/prometheus/consoles'
      # Habilitar lifecycle pro armazenamento do prometheus
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    depends_on:
      - api-autenticacao
    user: root

  # proxy:
  #   image: nginx
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/proxy.conf:/etc/nginx/conf.d/proxy.conf
  #   ports:
  #     - 80:80
  #   depends_on:
  #     - api-autenticacao

  grafana-auth:
    image: grafana/grafana # https://grafana.com/docs/grafana/latest/setup-grafana/configure-docker/
    volumes:
      - ./grafana:/var/lib/grafana
    ports:
      - 9091:3000
    depends_on:
      - prometheus-auth

  loki-auth:
    image: grafana/loki
    command:
        - "-config.file=/etc/loki/local-config.yaml"
        - "-print-config-stderr=true"
    ports:
        - "9092:3100"

  simulacao-consumidor:
    build:
      context: ./simulacao_consumidor_api/
      dockerfile: Dockerfile
    image: simulacao-consumidor
    depends_on:
      - api-autenticacao
      - grafana-auth

volumes:
  postgresauth-data:

secrets:
  senha-postgres:
    file: ./.senhapostgres.txt
